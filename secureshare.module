<?php
/**
 * @file
 * Adds Sharebuttons from Facebook, Google+ and Twitter to each selected node type and make it active after confirm from user.
 */

function secureshare_hook() {
  return array(
    'help' => array(
      'group' => 'help',
    ),
  );
}

function secureshare_ctools_plugin_api() {
  list($module, $api) = func_get_args();
  if ($module == 'secureshare' && $api == 'default_secureshare_profiles') {
    return array('version' => 2);
  }
}

/**
 * Implementation of hook_default_sexybookmarks_profile().
 */
function secureshare_default_secureshare_profile() {
  $export = array();

  $profile = new stdClass;
  $profile->disabled = FALSE; /* Edit this to true to make a default profile disabled initially */
  $profile->api_version = 2;
  $profile->name = 'default';
  $profile->config = array(); // @TODO: we need default settings here
  $export['default'] = $profile;

  return $export;
}

/**
 * Implements hook_permission().
 */
function secureshare_permission() {
  return array(
    'administer secureshare' => array(
      'title' => t('Administer Secureshare'),
      'description' => t('Manage Secureshare settings profiles.'),
    ),
  );
}

/**
 * Implementation of hook_theme()
 * registers our element theme function "theme_secureshare_element"
 * @return array
 */
function secureshare_theme() {
  $theme = array();

  $theme['secureshare_element'] = array(
    'render element' => 'element',
    'file' => 'secureshare.theme.inc',
  );

  return $theme;
}

/**
 * Implementation of hook_element_info()
 */
function secureshare_element_info() {
  $elements = array();

  $elements['secureshare'] = array(
    '#input' => FALSE,
    '#theme_wrappers' => array('secureshare_element'),
    '#pre_render' => array('secureshare_pre_render_element'),
    '#secureshare_config' => array(),
    '#attached' => array(
      'library' => array(
        array('secureshare', 'socialshareprivacy'),
      ),
    ),
  );

  return $elements;
}

/**
 * Implements hook_element_info() > #pre_render
 * we use it to add element specific settings to js and generate a html id
 * @param $element
 */
function secureshare_pre_render_element($element) {

  // Skip already processed elements.
  if (isset($element['#secureshare_processed'])) {
    return $element;
  }
  // Initialize #secureshare_processed, so we do not process this element again.
  $element['#secureshare_processed'] = FALSE;

  $library_path = libraries_get_path('socialshareprivacy');

  // assign a element id if we dont have one
  if (!isset($element['#id'])) {
    $element['#id'] = drupal_html_id('secureshare');
  }

  // assign settings to js
  $settings = $element['#secureshare_config'];
  // assign minimal default settings
  $settings += array(
    // need to be blank, because heise plugin script try to load a css file...
    'css_path' => '',
    // we need to set the path to images of the library new
    'services' => array()
  );

  // ensure providers exists
  $settings['services'] += array('facebook' => array(), 'twitter' => array(), 'gplus' => array());
  // merge in the default images from library
  $settings['services']['facebook'] += array('dummy_img' => base_path() . $library_path . '/socialshareprivacy/images/dummy_facebook.png',);
  $settings['services']['twitter'] += array('dummy_img' => base_path() . $library_path . '/socialshareprivacy/images/dummy_gplus.png',);
  $settings['services']['gplus'] += array('dummy_img' => base_path() . $library_path . '/socialshareprivacy/images/dummy_twitter.png',);

  // we need to map the language for facebook...
  if (isset($settings['services']['facebook']['language'])) {
    $settings['services']['facebook']['language'] =
      (_secureshare_language_mapper($settings['services']['facebook']['language'])) ?
        _secureshare_language_mapper($settings['services']['facebook']['language']) :
        $settings['services']['facebook']['language'];
  }

  $element['#attached']['js'][] = array(
    'type' => 'setting',
    'data' => array('secureshare' => array($element['#id'] => $settings)),
  );

  $element['#secureshare_processed'] = TRUE;
  return $element;
}

/**
 * Implementation of hook_library()
 * registers the socialshareprivacy js plugin from heise as drupal library
 * we also register the css file here und remove the css_url parameter on heise plugin via defaults
 * because we want the css file in drupal best practice manier ;)
 *
 * @return (array)
 */
function secureshare_library() {
  $libraries = array();

  $libraries['socialshareprivacy'] = array(
    'title' => 'Socialshareprivacy',
    'website' => 'http://www.heise.de/extras/socialshareprivacy/',
    'version' => '1.3',
    'js' => array(
      drupal_get_path('module', 'secureshare') . '/js/secureshare.d7.init.js' => array(),
      libraries_get_path('socialshareprivacy') . '/jquery.socialshareprivacy.js' => array(),
    ),
    // loads the default css
    'css' => array(
      libraries_get_path('socialshareprivacy') . '/socialshareprivacy/socialshareprivacy.css' => array(),
    ),
  );

  return $libraries;
}

/**
 * Prepare and returns the configuration from specific profile.
 * @param string $profile
 * @return array
 */
function secureshare_get_config($profile = 'default') {
  $config = array();

  ctools_include('export');
  if (($profile = ctools_export_crud_load('secureshare_profiles', $profile))) {
    $config = $profile->config;
  }

  // give other modules the chance to change the settings
  drupal_alter('secureshare_config', $config, $profile);
  return $config;
}

/**
 * Helper method to map the drupal language shortcode to locale code...
 * @param null $lang
 * @return string
 */
function _secureshare_language_mapper($lang = NULL) {
  $languages = array(
    'af' => 'af_ZA',
    'ar' => 'ar_AR',
    'ay' => 'ay_BO',
    'az' => 'az_AZ',
    'be' => 'be_BY',
    'bg' => 'bg_BG',
    'bn' => 'bn_IN',
    'bs' => 'bs_BA',
    'ca' => 'ca_ES',
    'ck' => 'ck_US',
    'cs' => 'cs_CZ',
    'cy' => 'cy_GB',
    'da' => 'da_DK',
    'de' => 'de_DE',
    'el' => 'el_GR',
    'en' => 'en_US',
    'eo' => 'eo_EO',
    'es' => 'es_ES',
    'et' => 'et_EE',
    'eu' => 'eu_ES',
    'fa' => 'fa_IR',
    'fb' => 'fb_FI',
    'fb' => 'fb_LT',
    'fi' => 'fi_FI',
    'fo' => 'fo_FO',
    'fr' => 'fr_CA',
    'fr' => 'fr_FR',
    'ga' => 'ga_IE',
    'gl' => 'gl_ES',
    'gn' => 'gn_PY',
    'gu' => 'gu_IN',
    'he' => 'he_IL',
    'hi' => 'hi_IN',
    'hr' => 'hr_HR',
    'hu' => 'hu_HU',
    'hy' => 'hy_AM',
    'id' => 'id_ID',
    'is' => 'is_IS',
    'it' => 'it_IT',
    'ja' => 'ja_JP',
    'jv' => 'jv_ID',
    'ka' => 'ka_GE',
    'kk' => 'kk_KZ',
    'km' => 'km_KH',
    'kn' => 'kn_IN',
    'ko' => 'ko_KR',
    'ku' => 'ku_TR',
    'la' => 'la_VA',
    'li' => 'li_NL',
    'lt' => 'lt_LT',
    'lv' => 'lv_LV',
    'mg' => 'mg_MG',
    'mk' => 'mk_MK',
    'ml' => 'ml_IN',
    'mn' => 'mn_MN',
    'mr' => 'mr_IN',
    'ms' => 'ms_MY',
    'mt' => 'mt_MT',
    'nb' => 'nb_NO',
    'ne' => 'ne_NP',
    'nl' => 'nl_BE',
    'nl' => 'nl_NL',
    'nn' => 'nn_NO',
    'pa' => 'pa_IN',
    'pl' => 'pl_PL',
    'ps' => 'ps_AF',
    'pt' => 'pt_PT',
    'qu' => 'qu_PE',
    'rm' => 'rm_CH',
    'ro' => 'ro_RO',
    'ru' => 'ru_RU',
    'sa' => 'sa_IN',
    'se' => 'se_NO',
    'sk' => 'sk_SK',
    'sl' => 'sl_SI',
    'so' => 'so_SO',
    'sq' => 'sq_AL',
    'sr' => 'sr_RS',
    'sv' => 'sv_SE',
    'sw' => 'sw_KE',
    'sy' => 'sy_SY',
    'ta' => 'ta_IN',
    'te' => 'te_IN',
    'tg' => 'tg_TJ',
    'th' => 'th_TH',
    'tl' => 'tl_PH',
    'tl' => 'tl_ST',
    'tr' => 'tr_TR',
    'tt' => 'tt_RU',
    'uk' => 'uk_UA',
    'ur' => 'ur_PK',
    'uz' => 'uz_UZ',
    'vi' => 'vi_VN',
    'xh' => 'xh_ZA',
    'yi' => 'yi_DE',
    'zh' => 'zh_CN',
    'zu' => 'zu_ZA',
  );

  return (isset($languages[$lang])) ? $languages[$lang] : 'en_US';
}